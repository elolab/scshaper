// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// splitStrCpp
std::vector< std::string > splitStrCpp(std::string x, std::string del);
RcppExport SEXP _scShaper_splitStrCpp(SEXP xSEXP, SEXP delSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type del(delSEXP);
    rcpp_result_gen = Rcpp::wrap(splitStrCpp(x, del));
    return rcpp_result_gen;
END_RCPP
}
// innerConnection
bool innerConnection(std::string x, std::string y);
RcppExport SEXP _scShaper_innerConnection(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(innerConnection(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cycle
bool cycle(std::string x, std::string y);
RcppExport SEXP _scShaper_cycle(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cycle(x, y));
    return rcpp_result_gen;
END_RCPP
}
// connectable
bool connectable(std::string x, std::string y);
RcppExport SEXP _scShaper_connectable(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(connectable(x, y));
    return rcpp_result_gen;
END_RCPP
}
// replace
bool replace(std::string& str, const std::string& from, const std::string& to);
RcppExport SEXP _scShaper_replace(SEXP strSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type str(strSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(replace(str, from, to));
    return rcpp_result_gen;
END_RCPP
}
// connectGraphs
std::string connectGraphs(std::string x, std::string y);
RcppExport SEXP _scShaper_connectGraphs(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(connectGraphs(x, y));
    return rcpp_result_gen;
END_RCPP
}
// specialKruskal
std::string specialKruskal(NumericMatrix d);
RcppExport SEXP _scShaper_specialKruskal(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(specialKruskal(d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scShaper_splitStrCpp", (DL_FUNC) &_scShaper_splitStrCpp, 2},
    {"_scShaper_innerConnection", (DL_FUNC) &_scShaper_innerConnection, 2},
    {"_scShaper_cycle", (DL_FUNC) &_scShaper_cycle, 2},
    {"_scShaper_connectable", (DL_FUNC) &_scShaper_connectable, 2},
    {"_scShaper_replace", (DL_FUNC) &_scShaper_replace, 3},
    {"_scShaper_connectGraphs", (DL_FUNC) &_scShaper_connectGraphs, 2},
    {"_scShaper_specialKruskal", (DL_FUNC) &_scShaper_specialKruskal, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_scShaper(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
